{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aktuelle Trends der IKT \u00b6 Herzlich willkommen zur Veranstaltung Aktuelle Trends der IKT ! Grober Inhalt \u00b6 Wir besch\u00e4ftigen uns dieses Semester mit Progressive Web Apps (PWA) . Dieser Begriff ist 2015 bei Google entstanden. Progressive Web Apps bieten installierbare nativen Apps \u00e4hnliche Nutzererfahrungen sowohl auf dem Desktop als auch auf dem Smartphone, sind aber Webanwendungen, die im Browser laufen, also zum World Wide Web geh\u00f6ren. Typische Eigenschaften von Progressive Web Apps sind die Einbindung von Kamera und Mikrofon, dem eigenen Standort sowie die F\u00e4higkeit, (zumindest teilweise) offline ausf\u00fchrbar zu sein. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) \u00dcbung Aufgabe (Stand) Abgabe \u00dcbung bis 1. 04.-08.04.2022 Einf\u00fchrung und Organisatorisches - - - 2. 11.-15.04.2022 Grundger\u00fcst und Application Manifest \u00dcbung 1 - 30.04.2022 3. 18.-22.04.2022 Service workers \u00dcbung 2 - 07.05.2022 4. 25.-29.04.2022 Promises und Fetch API \u00dcbung 3 - 14.05.2022 5. 02.-06.05.2022 Service workers und Caching - - 21.05.2022 6. 09.-13.05.2022 Entwicklungsinfrastruktur \u00dcbung 4 - 28.05.2022 7. 16.-20.05.2022 Datenbank und Backend \u00dcbung 5 - 04.06.2022 8. 23.-27.05.2022 Frontend mit Backend-Anbindung \u00dcbung 6 - 11.06.2022 9. 30.-03.06.2022 Caching dynamische Daten mit IndexDB \u00dcbung 7 - 18.06.2022 10. 06.-10.06.2022 Hintergrundsynchronisation - Datenbank - 11. 13.-17.06.2022 Push-Notifikationen - Backend - 12. 20.-24.06.2022 Kamera und Geolocation - Backend - 13. 27.-01.07.2022 Wiederholung - Frontend - 14. 04.-08.07.2022 Wiederholung - Frontend - Abgabe 1.PZ 18.07.2022 - Abgabe 2.PZ 01.10.2022 - Organisatorisches \u00b6 Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie die \u00dcbungen l\u00f6sen und zu den jeweiligen Fristen per Git auf einen Server (GitHub oder GitLab) laden. Am Ende des Semesters ist eine Aufgabe abzugeben. Diese Aufgabe wird bewertet. Die Bewertung entspricht dann der Modulnote. Hier sind die \u00dcbungen beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt! Inhalte \u00b6 Semesteraufgabe \u00b6 Die als Semesteraufgabe zu entwickelnde Webanwendung sollte ein Frontend besitzen (muss nicht mit einem JavaScript-Framework erstellt werden), das Frontend soll responsive sein (wenn nicht, dann mobile first !), ein Backend (damit Daten auf dem Server verwaltet werden k\u00f6nnen), eine Datenbank zur persistenten Speicherung von Daten (wir verwenden MongoDB, kann aber auch MariaDB, MySQL, PostgresQL oder auch SQLite oder \u00e4hnlich In-Apps-Datenbanken sein), installierbar sein, offline nutzbar sein, die IndexedDB verwenden, Hintergrundsynchronisation verwenden, Push-Nachrichten verwenden, die Gelocation API verwenden, die Kamera oder eine andere technische Schnittstelle (z.B. Sensoren, Mikrofon) verwenden. Von den Punkten 5.-11. sollten 5 f\u00fcr eine 2,0 implementiert sein, 6 f\u00fcr eine 1,7 und 7 f\u00fcr eine 1,3. Ist die Anwendung besonders toll und/oder deployed, kann es auch eine 1,0 werden. Bitte erstellen Sie eine aussagekr\u00e4ftige README.md -Datei. Die erstellte Anwendung soll pr\u00e4sentiert werden und in einem kurzen Gespr\u00e4ch (15-20min) wird die Implementierung besprochen. Hier eine Idee einer Anwendung, eine Ausgabenverwaltung : installierbare Webanwendung, Formular f\u00fcr die Buchung einer Ausgabe Datum, Titel f\u00fcr die Ausgabe, Betrag, Foto des Kassenzettels, evtl. Geolocation des Ausgabeortes \u00dcbersicht \u00fcber Ausgaben, offline verwendbar, d.h. Ausgabe wird in der IndexedDB gespeichert und erst, wenn wieder online, dann in der Datenbank, Push-Benachrichtigung, wenn Ausgabe in der Datenbank gespeichert (Hintergrundsynchronisation), Backend ist zwingend erforderlich (f\u00fcr Speichern und Abrufen der Daten in die und aus der Datenbank), MongoDB zur persitenten Datenspeicherung, evtl. Nutzerverwaltung zur Verwaltung der eigenen Ausgaben. Sie k\u00f6nnen nat\u00fcrlich auch eine eigene Anwendungsidee umsetzen! Viel Spa\u00df und Erfolg!","title":"Home"},{"location":"#aktuelle-trends-der-ikt","text":"Herzlich willkommen zur Veranstaltung Aktuelle Trends der IKT !","title":"Aktuelle Trends der IKT"},{"location":"#grober-inhalt","text":"Wir besch\u00e4ftigen uns dieses Semester mit Progressive Web Apps (PWA) . Dieser Begriff ist 2015 bei Google entstanden. Progressive Web Apps bieten installierbare nativen Apps \u00e4hnliche Nutzererfahrungen sowohl auf dem Desktop als auch auf dem Smartphone, sind aber Webanwendungen, die im Browser laufen, also zum World Wide Web geh\u00f6ren. Typische Eigenschaften von Progressive Web Apps sind die Einbindung von Kamera und Mikrofon, dem eigenen Standort sowie die F\u00e4higkeit, (zumindest teilweise) offline ausf\u00fchrbar zu sein. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) \u00dcbung Aufgabe (Stand) Abgabe \u00dcbung bis 1. 04.-08.04.2022 Einf\u00fchrung und Organisatorisches - - - 2. 11.-15.04.2022 Grundger\u00fcst und Application Manifest \u00dcbung 1 - 30.04.2022 3. 18.-22.04.2022 Service workers \u00dcbung 2 - 07.05.2022 4. 25.-29.04.2022 Promises und Fetch API \u00dcbung 3 - 14.05.2022 5. 02.-06.05.2022 Service workers und Caching - - 21.05.2022 6. 09.-13.05.2022 Entwicklungsinfrastruktur \u00dcbung 4 - 28.05.2022 7. 16.-20.05.2022 Datenbank und Backend \u00dcbung 5 - 04.06.2022 8. 23.-27.05.2022 Frontend mit Backend-Anbindung \u00dcbung 6 - 11.06.2022 9. 30.-03.06.2022 Caching dynamische Daten mit IndexDB \u00dcbung 7 - 18.06.2022 10. 06.-10.06.2022 Hintergrundsynchronisation - Datenbank - 11. 13.-17.06.2022 Push-Notifikationen - Backend - 12. 20.-24.06.2022 Kamera und Geolocation - Backend - 13. 27.-01.07.2022 Wiederholung - Frontend - 14. 04.-08.07.2022 Wiederholung - Frontend - Abgabe 1.PZ 18.07.2022 - Abgabe 2.PZ 01.10.2022 -","title":"Grober Inhalt"},{"location":"#organisatorisches","text":"Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie die \u00dcbungen l\u00f6sen und zu den jeweiligen Fristen per Git auf einen Server (GitHub oder GitLab) laden. Am Ende des Semesters ist eine Aufgabe abzugeben. Diese Aufgabe wird bewertet. Die Bewertung entspricht dann der Modulnote. Hier sind die \u00dcbungen beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt!","title":"Organisatorisches"},{"location":"#inhalte","text":"","title":"Inhalte"},{"location":"#semesteraufgabe","text":"Die als Semesteraufgabe zu entwickelnde Webanwendung sollte ein Frontend besitzen (muss nicht mit einem JavaScript-Framework erstellt werden), das Frontend soll responsive sein (wenn nicht, dann mobile first !), ein Backend (damit Daten auf dem Server verwaltet werden k\u00f6nnen), eine Datenbank zur persistenten Speicherung von Daten (wir verwenden MongoDB, kann aber auch MariaDB, MySQL, PostgresQL oder auch SQLite oder \u00e4hnlich In-Apps-Datenbanken sein), installierbar sein, offline nutzbar sein, die IndexedDB verwenden, Hintergrundsynchronisation verwenden, Push-Nachrichten verwenden, die Gelocation API verwenden, die Kamera oder eine andere technische Schnittstelle (z.B. Sensoren, Mikrofon) verwenden. Von den Punkten 5.-11. sollten 5 f\u00fcr eine 2,0 implementiert sein, 6 f\u00fcr eine 1,7 und 7 f\u00fcr eine 1,3. Ist die Anwendung besonders toll und/oder deployed, kann es auch eine 1,0 werden. Bitte erstellen Sie eine aussagekr\u00e4ftige README.md -Datei. Die erstellte Anwendung soll pr\u00e4sentiert werden und in einem kurzen Gespr\u00e4ch (15-20min) wird die Implementierung besprochen. Hier eine Idee einer Anwendung, eine Ausgabenverwaltung : installierbare Webanwendung, Formular f\u00fcr die Buchung einer Ausgabe Datum, Titel f\u00fcr die Ausgabe, Betrag, Foto des Kassenzettels, evtl. Geolocation des Ausgabeortes \u00dcbersicht \u00fcber Ausgaben, offline verwendbar, d.h. Ausgabe wird in der IndexedDB gespeichert und erst, wenn wieder online, dann in der Datenbank, Push-Benachrichtigung, wenn Ausgabe in der Datenbank gespeichert (Hintergrundsynchronisation), Backend ist zwingend erforderlich (f\u00fcr Speichern und Abrufen der Daten in die und aus der Datenbank), MongoDB zur persitenten Datenspeicherung, evtl. Nutzerverwaltung zur Verwaltung der eigenen Ausgaben. Sie k\u00f6nnen nat\u00fcrlich auch eine eigene Anwendungsidee umsetzen! Viel Spa\u00df und Erfolg!","title":"Semesteraufgabe"},{"location":"einfuehrung/","text":"Einf\u00fchrung \u00b6 In diesem Semester geht es um Progressive Web Apps (PWA) . PWA sind Funktionen, die wir Webanwendungen hinzuf\u00fcgen k\u00f6nnen, um sie in ihrer Funktionalit\u00e4t zu erweitern. Die so werweiterten Webanwendungen kommen mit solchen Funktionen nativen Apps immer n\u00e4her, d.h. das Look and Feel gleicht sich mit PWAs nativen Apps an. Dazu geh\u00f6ren Funktionalit\u00e4ten, wie z.B. die M\u00f6glichkeit, die Webanwendung auch offline zu verwenden, die Kamera zu nutzen, den eigenen Standort zu verwenden, Daten im Hintergrund zu synchronisieren. Das bedeutet aber nicht automatisch, dass wir ausschlie\u00dflich auf moderne Browser angewiesen sind, die diese Funktionalit\u00e4ten von PWAs unterst\u00fctzen. Die Webanwendungen sollen auch weiterhin auf alten Webbrowsern laufen, dann jedoch eventuell ohne einige oder alle PWA-Funktionalit\u00e4ten. Progressive Web Apps m\u00fcssen zuverl\u00e4ssig ( reliable ) sein, d.h. sie m\u00fcssen schnelle Ladezeiten aufweisen und sogar (teilweise) offline funktionieren, schnell sein, d.h. schnell auf Nutzerinteraktionen reagieren, motivierend sein, die Webanwendung zu verwenden, d.h. einerseits intuitiv bedienbar und anderseits, z.B. \u00fcber Push-Notifikationen, die Nutzerinnen animieren, die App zu nutzen. Die prinzipielle Idee einer Progressive Web App l\u00e4sst sich vereinfacht durch die folgenden Abbildung veranschaulichen: Eine Progressive Web App ist eine Webanwendung, die sich wie eine native mobile App verh\u00e4lt. Webanwendungen vs. native Apps \u00b6 Die meisten Nutzerinnen verwenden die meiste Zeit native Apps auf ihrem Smartphone. Nur zu einem geringen Prozentsatz werden Web-Anwendungen (also der Browser) auf dem Smartphone verwendet. Das spricht eigentlich eher daf\u00fcr, dass wir uns mit der Entwicklung nativer Apps besch\u00e4ftigen sollten, als mit der Entwicklung von (mobilen) Webanwendungen. Die vorrangige Verwendung nativer Apps hat mehrere Gr\u00fcnde: Push-Notifikationen : Native Apps laufen im Hintergrund und die Nutzerinnen werden \u00fcber Push-Notifikationen informiert, wenn etwas Neues passiert ist, z.B. neue Nachrichten , E-Mails, etc. Man muss also gar nicht aktiv die native App bedienen, um \u00fcber Aktuelles informiert zu werden. App-Icons auf dem Home-Bildschirm : erm\u00f6glichen einen schnellen, direkten Zugang zu den Apps. Ger\u00e4tefunktionen : wie z.B. Standortermittlung, Kameras und Mikrofine k\u00f6nnen leicht in native Apps eingebaut werden. F\u00fcr Webanwendungen ist dies nur aufw\u00e4ndig m\u00f6glich. Offline-Funktionalit\u00e4ten : viele native Apps k\u00f6nnen auch offline ganz oder teilweise verwendet werden, z.B. Spiele oder Musikapps, die heruntergeladene Musik abspielen. App-Icons auf dem Home-Bildschirm k\u00f6nnen wir auch f\u00fcr Links auf unsere Webanwendung erstellen und die anderen drei Argumente wollen wir ja genau mit Progressive Web Apps zunichte machen. Das hei\u00dft, mit Progressive Web Apps kommen die Vorteile nativer Apps im Vergleich zu Webanwendungen nicht mehr zum Tragen. Demgegen\u00fcber stahen zwei Gr\u00fcnde, warum Webanwendungen besser sind als native Apps: Native Apps m\u00fcssen sowohl f\u00fcr iOS als auch f\u00fcr Android erstellt werden, um eine m\u00f6glichst gro\u00dfe Nutzerinnenzahl anzusprechen. Dazu m\u00fcssen auch unterschiedliche programmiersprachen verwendet werden (Swift f\u00fcr iOS und Java/Kotlin f\u00fcr Android). Zwar versuchen Hybride Tools diesen Nachteil zu umgehen, aber es gelingt nicht wirklich. Es werden so gut wie nie neue native Apps auf Smartphones geladen. Umfragen ergeben, dass Nutzerinnen die allermeiste Zeit am Smartphone mit h\u00f6chstens drei Apps verbringen. Alle weiteren Apps werden am Anfang der Nutzung installiert. Es kommen im Laufe eines \"Smartphone-Lebens\" kaum welche hinzu. Die durchschnittliche Anzahl neuhinzugef\u00fcgter Apps im Monat liegt bei nahe 0. Die Verwendung von Webanwendungen ist deutlich einfacher. Man muss nichts installieren. Man googlet einfach und \u00f6ffnet dann die Seite. Die Bandbreite aller Webanwendungen ist deutlich schneller erreichbar als eine gro\u00dfe Anzahl an nativen Apps. Die Reichweite einer Webanwendung ist deutlich gr\u00f6\u00dfer als die Reichweite einer nativen App. Funktionalit\u00e4ten Nutzerinnen-Reichweite native App Zugriff auf Ger\u00e4tefunktionalit\u00e4ten nur sehr wenige Apps werden von sehr vielen Nutzerinnen die meiste Zeit verwendet herk\u00f6mmliche Webanwendungen sehr eingeschr\u00e4nkter (gar kein) Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang progressive Webanwendungen Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang Links und Videos \u00b6 Hier zwei kurze Einf\u00fchrungsvideos zu PWAs: Progressive Web Apps in 100 Seconds Progressive Web Apps - PWA Roadshow Hier einige intressante Links zu PWAs: Learn PWA Progressive Web-Apps: Was versprechen die progressiven Apps? Online Verzeichnis PWAs PWAs vs. SPAs \u00b6 Wir haben noch immer nicht unsere erste Progressive Web App erstellt ;-(. Bevor wir das tun, diskutieren wie zun\u00e4chst noch die Unterschiede zwischen einer Progressive Web App und einer Single Page Application , wie wir sie im WebTech-Kurs erstellt haben. Single Page Applications (SPAs) sind Webanwendungen, die mit JavaScript erstellt werden, typischerweise mit einem JavaScript-Framewaork, wie Angular , React oder Vue.js . In SPAs wird das DOM st\u00e4ndig neu gerendert, welches sich durch Nutzereingaben oder Lifecycle-Events \u00e4ndert. Das Grundger\u00fcst einer SPA besteht aus genau einer HTML -Seite (typischerweise index.html ), in die verschiedene Komponenten eingebunden wird. Eine Single Page Application ist vornehmlich hoch reaktiv auf Nutzereingaben, im Sinne von schneller Reaktion. Progressive Web Applications (PWAs) sind eine Sammlung verschiedener Technologien. Es ist v\u00f6llig egal, ob diese Technologien in eine Single Page Application eingebunden werden oder in eine \"herk\u00f6mmliche\" (Multi-Page-) Webanwendung. Die Idee einer PWA ist, dass sie hoch reaktiv im Sinne st\u00e4ndiger Verf\u00fcgbarkeit ist. JavaScript spielt bei PWAs nicht die dominate Rolle, wie bei SPAs. Sie k\u00f6nnen eine oder mehrere progressive Funktionalit\u00e4ten existierender Webanwendungen hinzuf\u00fcgen (service worker, caching, push notifivcations, ...) oder eine PWA von Grund auf neu implementieren. Lighthouse \u00b6 Lighthouse ist ein Plugin f\u00fcr die Developertools von Chrome, mit dessen Hilfe gemessen werden kann, wie progressive eine Webanwendung ist. Die folgende Abbildung zeigt den Einsatz von Lighthouse f\u00fcr die PWA https://2048game.com/ - ein Spiel, das Sie wahrscheinlich kennen. Wechseln Sie in den Developertools auf die mobile Ansicht. W\u00e4hlen Sie dann im Reiter Lighthouse die Analyse. Probieren Sie auch mal aus, die Anwendung im Offline-Modus zu verwenden. Wechseln Sie dazu in den Developertools auf den Reiter Network und dort in der Auswahlliste auf Offline . Selbst wenn Sie Disable Cache anklicken, werden Sie feststellen, dass sich das Spiel noch spielen l\u00e4sst. Viel Spa\u00df! ;-) PWA Checklist \u00b6 Im Lighthouse-Plugin finden Sie auch einen Link zur PWA Checklist . Diese Checklist wird verwendet, um zu beurteilen, wie progressive eine Webanwendung ist. Eine gute \u00dcbersicht finden Sie auch hier . Success Wir haben jetzt eine Idee davon, was Progressive Web Apps sind. Jetzt legen wir los und erstellen eigene PWAs!","title":"Einf\u00fchrung"},{"location":"einfuehrung/#einfuhrung","text":"In diesem Semester geht es um Progressive Web Apps (PWA) . PWA sind Funktionen, die wir Webanwendungen hinzuf\u00fcgen k\u00f6nnen, um sie in ihrer Funktionalit\u00e4t zu erweitern. Die so werweiterten Webanwendungen kommen mit solchen Funktionen nativen Apps immer n\u00e4her, d.h. das Look and Feel gleicht sich mit PWAs nativen Apps an. Dazu geh\u00f6ren Funktionalit\u00e4ten, wie z.B. die M\u00f6glichkeit, die Webanwendung auch offline zu verwenden, die Kamera zu nutzen, den eigenen Standort zu verwenden, Daten im Hintergrund zu synchronisieren. Das bedeutet aber nicht automatisch, dass wir ausschlie\u00dflich auf moderne Browser angewiesen sind, die diese Funktionalit\u00e4ten von PWAs unterst\u00fctzen. Die Webanwendungen sollen auch weiterhin auf alten Webbrowsern laufen, dann jedoch eventuell ohne einige oder alle PWA-Funktionalit\u00e4ten. Progressive Web Apps m\u00fcssen zuverl\u00e4ssig ( reliable ) sein, d.h. sie m\u00fcssen schnelle Ladezeiten aufweisen und sogar (teilweise) offline funktionieren, schnell sein, d.h. schnell auf Nutzerinteraktionen reagieren, motivierend sein, die Webanwendung zu verwenden, d.h. einerseits intuitiv bedienbar und anderseits, z.B. \u00fcber Push-Notifikationen, die Nutzerinnen animieren, die App zu nutzen. Die prinzipielle Idee einer Progressive Web App l\u00e4sst sich vereinfacht durch die folgenden Abbildung veranschaulichen: Eine Progressive Web App ist eine Webanwendung, die sich wie eine native mobile App verh\u00e4lt.","title":"Einf\u00fchrung"},{"location":"einfuehrung/#webanwendungen-vs-native-apps","text":"Die meisten Nutzerinnen verwenden die meiste Zeit native Apps auf ihrem Smartphone. Nur zu einem geringen Prozentsatz werden Web-Anwendungen (also der Browser) auf dem Smartphone verwendet. Das spricht eigentlich eher daf\u00fcr, dass wir uns mit der Entwicklung nativer Apps besch\u00e4ftigen sollten, als mit der Entwicklung von (mobilen) Webanwendungen. Die vorrangige Verwendung nativer Apps hat mehrere Gr\u00fcnde: Push-Notifikationen : Native Apps laufen im Hintergrund und die Nutzerinnen werden \u00fcber Push-Notifikationen informiert, wenn etwas Neues passiert ist, z.B. neue Nachrichten , E-Mails, etc. Man muss also gar nicht aktiv die native App bedienen, um \u00fcber Aktuelles informiert zu werden. App-Icons auf dem Home-Bildschirm : erm\u00f6glichen einen schnellen, direkten Zugang zu den Apps. Ger\u00e4tefunktionen : wie z.B. Standortermittlung, Kameras und Mikrofine k\u00f6nnen leicht in native Apps eingebaut werden. F\u00fcr Webanwendungen ist dies nur aufw\u00e4ndig m\u00f6glich. Offline-Funktionalit\u00e4ten : viele native Apps k\u00f6nnen auch offline ganz oder teilweise verwendet werden, z.B. Spiele oder Musikapps, die heruntergeladene Musik abspielen. App-Icons auf dem Home-Bildschirm k\u00f6nnen wir auch f\u00fcr Links auf unsere Webanwendung erstellen und die anderen drei Argumente wollen wir ja genau mit Progressive Web Apps zunichte machen. Das hei\u00dft, mit Progressive Web Apps kommen die Vorteile nativer Apps im Vergleich zu Webanwendungen nicht mehr zum Tragen. Demgegen\u00fcber stahen zwei Gr\u00fcnde, warum Webanwendungen besser sind als native Apps: Native Apps m\u00fcssen sowohl f\u00fcr iOS als auch f\u00fcr Android erstellt werden, um eine m\u00f6glichst gro\u00dfe Nutzerinnenzahl anzusprechen. Dazu m\u00fcssen auch unterschiedliche programmiersprachen verwendet werden (Swift f\u00fcr iOS und Java/Kotlin f\u00fcr Android). Zwar versuchen Hybride Tools diesen Nachteil zu umgehen, aber es gelingt nicht wirklich. Es werden so gut wie nie neue native Apps auf Smartphones geladen. Umfragen ergeben, dass Nutzerinnen die allermeiste Zeit am Smartphone mit h\u00f6chstens drei Apps verbringen. Alle weiteren Apps werden am Anfang der Nutzung installiert. Es kommen im Laufe eines \"Smartphone-Lebens\" kaum welche hinzu. Die durchschnittliche Anzahl neuhinzugef\u00fcgter Apps im Monat liegt bei nahe 0. Die Verwendung von Webanwendungen ist deutlich einfacher. Man muss nichts installieren. Man googlet einfach und \u00f6ffnet dann die Seite. Die Bandbreite aller Webanwendungen ist deutlich schneller erreichbar als eine gro\u00dfe Anzahl an nativen Apps. Die Reichweite einer Webanwendung ist deutlich gr\u00f6\u00dfer als die Reichweite einer nativen App. Funktionalit\u00e4ten Nutzerinnen-Reichweite native App Zugriff auf Ger\u00e4tefunktionalit\u00e4ten nur sehr wenige Apps werden von sehr vielen Nutzerinnen die meiste Zeit verwendet herk\u00f6mmliche Webanwendungen sehr eingeschr\u00e4nkter (gar kein) Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang progressive Webanwendungen Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang","title":"Webanwendungen vs. native Apps"},{"location":"einfuehrung/#links-und-videos","text":"Hier zwei kurze Einf\u00fchrungsvideos zu PWAs: Progressive Web Apps in 100 Seconds Progressive Web Apps - PWA Roadshow Hier einige intressante Links zu PWAs: Learn PWA Progressive Web-Apps: Was versprechen die progressiven Apps? Online Verzeichnis PWAs","title":"Links und Videos"},{"location":"einfuehrung/#pwas-vs-spas","text":"Wir haben noch immer nicht unsere erste Progressive Web App erstellt ;-(. Bevor wir das tun, diskutieren wie zun\u00e4chst noch die Unterschiede zwischen einer Progressive Web App und einer Single Page Application , wie wir sie im WebTech-Kurs erstellt haben. Single Page Applications (SPAs) sind Webanwendungen, die mit JavaScript erstellt werden, typischerweise mit einem JavaScript-Framewaork, wie Angular , React oder Vue.js . In SPAs wird das DOM st\u00e4ndig neu gerendert, welches sich durch Nutzereingaben oder Lifecycle-Events \u00e4ndert. Das Grundger\u00fcst einer SPA besteht aus genau einer HTML -Seite (typischerweise index.html ), in die verschiedene Komponenten eingebunden wird. Eine Single Page Application ist vornehmlich hoch reaktiv auf Nutzereingaben, im Sinne von schneller Reaktion. Progressive Web Applications (PWAs) sind eine Sammlung verschiedener Technologien. Es ist v\u00f6llig egal, ob diese Technologien in eine Single Page Application eingebunden werden oder in eine \"herk\u00f6mmliche\" (Multi-Page-) Webanwendung. Die Idee einer PWA ist, dass sie hoch reaktiv im Sinne st\u00e4ndiger Verf\u00fcgbarkeit ist. JavaScript spielt bei PWAs nicht die dominate Rolle, wie bei SPAs. Sie k\u00f6nnen eine oder mehrere progressive Funktionalit\u00e4ten existierender Webanwendungen hinzuf\u00fcgen (service worker, caching, push notifivcations, ...) oder eine PWA von Grund auf neu implementieren.","title":"PWAs vs. SPAs"},{"location":"einfuehrung/#lighthouse","text":"Lighthouse ist ein Plugin f\u00fcr die Developertools von Chrome, mit dessen Hilfe gemessen werden kann, wie progressive eine Webanwendung ist. Die folgende Abbildung zeigt den Einsatz von Lighthouse f\u00fcr die PWA https://2048game.com/ - ein Spiel, das Sie wahrscheinlich kennen. Wechseln Sie in den Developertools auf die mobile Ansicht. W\u00e4hlen Sie dann im Reiter Lighthouse die Analyse. Probieren Sie auch mal aus, die Anwendung im Offline-Modus zu verwenden. Wechseln Sie dazu in den Developertools auf den Reiter Network und dort in der Auswahlliste auf Offline . Selbst wenn Sie Disable Cache anklicken, werden Sie feststellen, dass sich das Spiel noch spielen l\u00e4sst. Viel Spa\u00df! ;-)","title":"Lighthouse"},{"location":"einfuehrung/#pwa-checklist","text":"Im Lighthouse-Plugin finden Sie auch einen Link zur PWA Checklist . Diese Checklist wird verwendet, um zu beurteilen, wie progressive eine Webanwendung ist. Eine gute \u00dcbersicht finden Sie auch hier . Success Wir haben jetzt eine Idee davon, was Progressive Web Apps sind. Jetzt legen wir los und erstellen eigene PWAs!","title":"PWA Checklist"},{"location":"tools/","text":"Werkzeuge \u00b6 Chrome \u00b6 Es wird empfohlen, Chrome als Browser zu verwenden, da dieser Browser die besten Entwicklertools f\u00fcr Progressive Web Apps zur Verf\u00fcgung stellt. Insbesondere ist es empfehlenswert, das Plugin Lighthouse f\u00fcr die Developertools von Chrome zu installieren. Lighthouse \u00b6 Lighthouse ist ein Plugin f\u00fcr die Chrome-Developertools, mit dessen Hilfe gemessen werden kann, wie progressive eine App ist. Installieren Sie sich dieses Plugin, um auch die Performance Ihrer PWA zu messen. Integrated Development Environment (IDE) \u00b6 F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten. Node.js \u00b6 Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Laden Sie sich hier die aktuellste Version von Node.js herunter und installieren Sie diese auf Ihrem Rechner. Android Studio \u00b6 Um unsere PWAs als mobile Webanwendungen zu emulieren, benutzen wir Android Studio . Es ist f\u00fcr Mac, Linux und Windows verf\u00fcgbar. Laden Sie es sich herunter und installieren Sie es. Sie k\u00f6nnen es herunterladen und installieren, ohne einen Google-Account anzulegen (es gibt auch keinen Grund, das zu tun ;-)). https f\u00fcr localhost \u00b6 f\u00fcr Mac siehe hier https f\u00fcr Webserver \u00b6 siehe hier siehe hier Ngrok \u00b6 Ngrok stellt einen sicheren Tunnel zu einem Webserver her. Ngrok wirkt wie ein Proxy, der einer Anwendung suggeriert, mit einem Webserver \u00fcber eine sichere Verbindung zu kommunizieren, d.h. die Verbindung wirkt wie eine https -Verbindung. Die Installation ist einfach, ben\u00f6tigt aber Registrierungsdaten (zur Erzeugung des Authentifizierungstokens). Nach dem Download wird das Paket entpackt und mit dem Authentifizierungstoken aufgerufen. Nach dem Starten der Webanwendung stellt man mit ngrok http <Port> den sicheren Tunnel her, wobei <Port> f\u00fcr den Port steht, unter dem die Anwednung auf dem Webserver l\u00e4uft. Icons erzeugen und in die manifest.json eintragen \u00b6 Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons f\u00fcr die unterschiedlichen Plattformen zu erzeugen und dann noch die entsprechenden Eintr\u00e4ge in der manifest.json vorzunehmen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Alles weitere dazu steht hier . WebApp-Manifest-Generator \u00b6 Bei der Erstellung Ihrer manifest.json k\u00f6nnen Sie sich auch unterst\u00fctzen lassen, n\u00e4mlich hier oder hier . Workbox \u00b6 Workbox ist eine JavaScript-Bibliothek, die alle wesentlichen Funktionalit\u00e4ten von Service Workern bereitstellt. Interssante Links zu PWA \u00b6 PWA Checklist PWA API 11 Examples of Progressive Web Apps How-to: Progressive Web Apps praktisch erkl\u00e4rt Chrome Developer Summit 2020 12 Best Examples of Progressive Web Apps (PWAs) in 2020 Lighthouse Performance Scoring Service worker Spezifikation","title":"Tools"},{"location":"tools/#werkzeuge","text":"","title":"Werkzeuge"},{"location":"tools/#chrome","text":"Es wird empfohlen, Chrome als Browser zu verwenden, da dieser Browser die besten Entwicklertools f\u00fcr Progressive Web Apps zur Verf\u00fcgung stellt. Insbesondere ist es empfehlenswert, das Plugin Lighthouse f\u00fcr die Developertools von Chrome zu installieren.","title":"Chrome"},{"location":"tools/#lighthouse","text":"Lighthouse ist ein Plugin f\u00fcr die Chrome-Developertools, mit dessen Hilfe gemessen werden kann, wie progressive eine App ist. Installieren Sie sich dieses Plugin, um auch die Performance Ihrer PWA zu messen.","title":"Lighthouse"},{"location":"tools/#integrated-development-environment-ide","text":"F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten.","title":"Integrated Development Environment (IDE)"},{"location":"tools/#nodejs","text":"Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Laden Sie sich hier die aktuellste Version von Node.js herunter und installieren Sie diese auf Ihrem Rechner.","title":"Node.js"},{"location":"tools/#android-studio","text":"Um unsere PWAs als mobile Webanwendungen zu emulieren, benutzen wir Android Studio . Es ist f\u00fcr Mac, Linux und Windows verf\u00fcgbar. Laden Sie es sich herunter und installieren Sie es. Sie k\u00f6nnen es herunterladen und installieren, ohne einen Google-Account anzulegen (es gibt auch keinen Grund, das zu tun ;-)).","title":"Android Studio"},{"location":"tools/#https-fur-localhost","text":"f\u00fcr Mac siehe hier","title":"https f\u00fcr localhost"},{"location":"tools/#https-fur-webserver","text":"siehe hier siehe hier","title":"https f\u00fcr Webserver"},{"location":"tools/#ngrok","text":"Ngrok stellt einen sicheren Tunnel zu einem Webserver her. Ngrok wirkt wie ein Proxy, der einer Anwendung suggeriert, mit einem Webserver \u00fcber eine sichere Verbindung zu kommunizieren, d.h. die Verbindung wirkt wie eine https -Verbindung. Die Installation ist einfach, ben\u00f6tigt aber Registrierungsdaten (zur Erzeugung des Authentifizierungstokens). Nach dem Download wird das Paket entpackt und mit dem Authentifizierungstoken aufgerufen. Nach dem Starten der Webanwendung stellt man mit ngrok http <Port> den sicheren Tunnel her, wobei <Port> f\u00fcr den Port steht, unter dem die Anwednung auf dem Webserver l\u00e4uft.","title":"Ngrok"},{"location":"tools/#icons-erzeugen-und-in-die-manifestjson-eintragen","text":"Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons f\u00fcr die unterschiedlichen Plattformen zu erzeugen und dann noch die entsprechenden Eintr\u00e4ge in der manifest.json vorzunehmen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Alles weitere dazu steht hier .","title":"Icons erzeugen und in die manifest.json eintragen"},{"location":"tools/#webapp-manifest-generator","text":"Bei der Erstellung Ihrer manifest.json k\u00f6nnen Sie sich auch unterst\u00fctzen lassen, n\u00e4mlich hier oder hier .","title":"WebApp-Manifest-Generator"},{"location":"tools/#workbox","text":"Workbox ist eine JavaScript-Bibliothek, die alle wesentlichen Funktionalit\u00e4ten von Service Workern bereitstellt.","title":"Workbox"},{"location":"tools/#interssante-links-zu-pwa","text":"PWA Checklist PWA API 11 Examples of Progressive Web Apps How-to: Progressive Web Apps praktisch erkl\u00e4rt Chrome Developer Summit 2020 12 Best Examples of Progressive Web Apps (PWAs) in 2020 Lighthouse Performance Scoring Service worker Spezifikation","title":"Interssante Links zu PWA"}]}